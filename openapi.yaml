openapi: "3.0.0"
info:
  version: 1.0.0
  title: Airflow Admin Console
  license:
    name: "Group#3 - Capstone Project"
servers:
  - url: http://localhost:8080/api/v1
    description: "development url"
  - url: https://liangfaan.com/api/v1
    description: "production url"
paths:
  /login:
    post: 
      summary: User Authentication
      operationId: userLogin
      tags: 
        - Authentication
      requestBody:
        description: Input user authentication
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        '200':
          description: Success login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAccess"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users:
    get:
      summary: List all pets
      operationId: listUsers
      security: 
        - bearerAuth: ['Admin']
      tags:
        - User
      # parameters:
      #   - name: userName
      #     in: query
      #     description: Retrieve user information based on user name
      #     required: false
      #     schema:
      #       type: string
      responses:
        '200':
          description: A paged array of users
          # headers:
          #   x-next:
          #     description: A link to the next page of responses
          #     schema:
          #       type: string
          content:
            application/json:    
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: User Register
      operationId: createUser
      security: 
        - bearerAuth: ['Admin']
      tags:
        - User
      requestBody:
        description: Input user information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userName}:
    get:
      summary: "Retrieve user by name"
      operationId: getUser
      security: 
        - bearerAuth: []
      tags:
          - "User"
      parameters: 
        - name: userName
          in: path
          description: "Retrieve user informaton based on user name"
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: A paged array of users
          # headers:
          #   x-next:
          #     description: A link to the next page of responses
          #     schema:
          #       type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/roles/{userName}:
    get:
      summary: "Retrieve user roles by userName"
      operationId: getUserRoles
      security:
        - bearerAuth: ['Admin']
      tags:
        - "User"
      parameters: 
        - name: userName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Array of user roles
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserRole'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /dags:
    get: 
      summary: Retrieve airflow DAGs
      operationId: getDags
      security: 
        - bearerAuth: ['Op','Viewer','User']
      tags: 
        - Dag
      responses:
        '200':
          description: Success retrieve all DAG
          content:
            application/json:    
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dag'
        default:
            description: unexpected error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
  /tasks:
    get:
      summary: retrieve dags schedule from airflow
      operationId: getTasks
      security: 
        - bearerAuth: ['Op','Viewer','User']
      tags: 
        - Task
      responses:
        '200':
          description: Success retrieve all tasks
          content:
            application/json:    
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskInstance'
        default:
            description: unexpected error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
  /tasks/schedule:
    get:
      summary: retrieve dags schedule from airflow
      operationId: getTaskSchedule
      security: 
        - bearerAuth: ['Op','Viewer']
      tags: 
        - Task
      responses:
        '200':
          description: Success retrieve all tasks
          content:
            application/json:    
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskSchedule'
        default:
            description: unexpected error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
  /jobs:
    get:
      summary: retrieve dags schedule from airflow
      operationId: getJobs
      security: 
        - bearerAuth: ['Op','Viewer']
      tags: 
        - Job
      responses:
        '200':
          description: Success retrieve all jobs
          content:
            application/json:    
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        default:
            description: unexpected error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
  /search:
    get:
      summary: searching books from elastic
      operationId: elasticSearch
      security: 
        - bearerAuth: ['Viewer']
      tags: 
        - Search
      parameters:
        - in: query
          name: q
          schema:
            type: string
          required: true
          description: searching content
      responses:
        '200':
          description: Success search response
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
  /notification/receive/{appId}:
    get:
      summary: consume notificaitons from Kafka
      operationId: retrieveNotifications
      security: 
        - bearerAuth: ['Viewer']
      tags: 
        - Notification
      parameters: 
        - in: path
          name: appId
          schema:
            type: string
          description: App id will be used as kafka consumer group id
          required: true
      responses:
        '200':
          description: Success search response
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchList'
        '404':
          description: Content not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
  /notification/publish:
    put:
      summary: consume notificaitons from Kafka
      operationId: publishNotifications
      security: 
        - bearerAuth: ['Viewer']
      tags: 
        - Notification
      requestBody:
        description: publish message body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Success search response
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
      
      
  schemas:
    User:
      type: object
      required: 
        - firstName
        - lastName
        - userName
        - active
        - email
        - password
      properties:
        id: 
          type: integer
          format: int64
        firstName:
          type: string
        lastName: 
          type: string
        password: 
          type: string
        active:
          type: integer
          enum: [1, 0]
        loginCount:
          type: integer
        failLoginCount:
          type: integer
        createdOn: 
          type: string
          format: date-time
        createdBy:
          $ref:  "#/components/schemas/User"
        changedBy:
          $ref:  "#/components/schemas/User"
        userRoles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
    Login:
      type: object
      properties:
        userName:
          type: string
        password:
          type: string
        refresh:
          type: boolean
        provider:
          type: string
    UserAccess:
      type: object
      properties:
        accesssToken:
          type: string
        refreshToken:
          type: string
    UserRole:
      type: object
      properties:
        mappingId:
          type: integer
        userId: 
          type: integer
        userName:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    Role: 
      type: object
      properties:
        id: 
          type: integer
        name: 
          type: string
        permissions: 
          type: array
          items:
            $ref: '#/components/schemas/Permission'
    Permission:
      type: object
      properties:
        name: 
          type: string
        id: 
          type: integer
        views:
          type: array
          items:
            $ref: '#/components/schemas/View'
    View: 
      type: object
      properties:
        id:
          type: integer
        viewName: 
          type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Dag:
      type: object
      properties:
        dagId: 
          type: string
        isPaused: 
          type: boolean
        isSubDag:
          type: boolean
        isActive:
          type: boolean
        lastSchedulerRun:
          type: string
          format: datetime
        lastPick:
          type: string
          format: datetime
        lastExpired:
          type: string
          format: datetime
        schedulerLock:
          type: boolean
        pickleId:
          type: integer
        flieLoc:
          type: string
        owners:
          type: string
        description: 
          type: string
        defaultView:
          type: string
        scheduleInterval: 
          type: string
        rootDagId:
          type: string
    DagCode: 
      type: object
      properties:
        fileLocHash: 
          type: string
          description: Hashed file location
        fileLoc:
          type: string
          description: file location
        sourceCode:
          type: string
          description: source code
        lastUpdated:
          type: string
          format: datetime
    DagTag:
      type: object
      properties:
        name: 
          type: string
          description: tag name
        dagId:
          type: string
          description: dag id
    # DagPickle:
    #   type: object
    #   properties:
    #     id: 
    #       type: integer
    #     picked: 
    #       type: string
    #     createDateTime: 
    #       type: string
    #       format: datetime
    #     pickleHash: 
    #       type: number
    Job:
      type: object
      properties:
        id:
          type: integer
        dag_id: 
          type: string
        state: 
          type: string
        jobType: 
          type: string
        startDate:
          type: string
          format: datetime
        endDate:
          type: string
          format: datetime
        lastHeartBeat: 
          type: string
          format: datetime
        executorClass:
          type: string
        hostname:
          type: string
        unixName:
          type: string
    TaskInstance:
      type: object
      properties:
        taskId: 
          type: string
        dagId:
          type: string
        executeDate: 
          type: string
          format: datetime
        startDate: 
          type: string
          format: datetime
        endDate:
          type: string
          format: datetime
        duration: 
          type: number
        state:
          type: string
        tryNumber:
          type: integer
        hostname:
          type: string
        unixName:
          type: string
        jobId:
          type: integer
        queue: 
          type: string
        priorityWeight: 
          type: integer
        operator: 
          type: string
        queuedDateTime: 
          type: string
          format: datetime
        pid:
          type: integer
        maxTries:
          type: integer
        executorConfig:
          type: string
        poolSlots: 
          type: integer
    TaskSchedule: 
      type: object
      properties:
        id: 
          type: integer
        taskId: 
          type: string
        dagId: 
          type: string
        executionDate:
          type: string
          format: datetime
        tryNumber:
          type: integer
        startDate: 
          type: string
          format: datetime
        endDate:
          type: string
          format: datetime
        duration:
          type: integer
        reschduleDate:
          type: string
          format: datetime
    Metadata:
      type: object
      properties:
        accession_no_csv: 
          type: string
        Image: 
          type: string
        object_work_type:
          type: string
        title_text: 
          type: string
        preference: 
          type: string
        title_language: 
          type: string
        creator_2: 
          type: string
        creator_1: 
          type: string
        creator_role: 
          type: string
        creation_date: 
          type: string
        creation_place_original_location: 
          type: string
        styles_periods_indexing_terms: 
          type: string
        inscriptions: 
          type: string
        inscription_language: 
          type: string
        scale_type: 
          type: string
        shape: 
          type: string
        materials_name: 
          type: string
        techniques_name: 
          type: string
        object_colour: 
          type: string
        edition_description: 
          type: string
        physical_appearance: 
          type: string
        subject_terms_1: 
          type: string
        subject_terms_2: 
          type: string
        subject_terms_3: 
          type: string
        subject_terms_4: 
          type: string
        context_1: 
          type: string
        context_2: 
          type: string
        context_3: 
          type: string
        context_4: 
          type: string
        context_5: 
          type: string
        context_6: 
          type: string
        context_7: 
          type: string
        context_8: 
          type: string
        context_9: 
          type: string
        context_10: 
          type: string
        context_11: 
          type: string
        context_12: 
          type: string
        context_13: 
          type: string
        context_14: 
          type: string
        context_15: 
          type: string
        context_16: 
          type: string
        context_17: 
          type: string
        context_18: 
          type: string
        context_19: 
          type: string
        context_20: 
          type: string
        context_21: 
          type: string
        context_22: 
          type: string
        context_23: 
          type: string
        context_24: 
          type: string
        sgcool_label_text: 
          type: string
    SearchList:
      type: object
      properties:
        _index: 
          type: string
        _type: 
          type: string
        _id: 
          type: string
        _score:
          type: number
        _source:
          $ref: '#/components/schemas/SearchResult'
    SearchResult:
      type: object
      properties:
        id: 
          type: string
        title: 
          type: string
        source: 
          type: string
        path: 
          type: string
        content:
          type: string
        createDate:
          type: string
        version: 
          type: integer
        latest:
          type: boolean
        roles:
          items:
            type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        nlpDate:
          type: string
        connectorId: 
          type: integer
        tags:
          type: object
          
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid